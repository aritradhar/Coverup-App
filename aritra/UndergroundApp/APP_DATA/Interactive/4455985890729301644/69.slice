   E   He_mascots" title="Category:Game mascots">Game mascots</a></li><li><a href="/wiki/Category:Starter_Pok%C3%A9mon" title="Category:Starter Pokémon">Starter Pokémon</a></li><li><a href="/wiki/Category:Mystery_Dungeon_starters" title="Category:Mystery Dungeon starters">Mystery Dungeon starters</a></li><li><a href="/wiki/Category:Pok%C3%A9mon_that_are_included_in_the_Japan-only_Pok%C3%A9mon_Stadium" title="Category:Pokémon that are included in the Japan-only Pokémon Stadium">Pokémon that are included in the Japan-only Pokémon Stadium</a></li><li><a href="/wiki/Category:F.E.A.R.-compatible_Pok%C3%A9mon" title="Category:F.E.A.R.-compatible Pokémon">F.E.A.R.-compatible Pokémon</a></li></ul></div></div>					<div id="bottomframelower">
										</div>
					<!-- end content -->
										<div class="visualClear"></div>
				</div>
</div>
<div id="rightcolbox">
<!-- Advert Right Start -->
<div id="uprightcol">
    <div class="rad-box">
        <script>
            (function () {
            var num = window.innerWidth < 1439? '00' : '02';
            document.write('<div id="cdm-zone-' + num + '"></div>');
            })();
        </script>
    </div>
</div>
<!-- <script async type='text/javascript' src='//cdn.connatix.com/min/connatix.renderer.infeed.min.js' data-connatix-token='b4bf453a-3cbb-4cfd-a5cc-60101ca75d21'></script> -->
<script>
    //if (location.search.split('testAmazon=')[1] == 1) {
        country = ''
        firstHeading = document.getElementById('firstHeading');
        amzSearchTerm = "";
        if (firstHeading.textContent.includes('(')) {
            amzSearchTerm = firstHeading.textContent.slice(0, firstHeading.textContent.indexOf('(')) + firstHeading.textContent.slice(firstHeading.textContent.indexOf(')') + 1).trim();
        }
        else {
            amzSearchTerm = firstHeading.textContent.trim();
        }
        tagCode = '';
        if (country == 'us') {
            tagCode = 'bulbapedia-20';
        }
        else {
            tagCode = 'bulbapedia-21';
        }
        var a = document.createElement('a');
        a.id = 'amazon-related';
        var linkText = document.createTextNode("Buy related Pokémon products");
        a.appendChild(linkText);
        a.title = "Buy related Pokémon products";
        a.href = "https://www.amazon.com/s/ref=nb_sb_noss?field-keywords=" + amzSearchTerm + " pokemon&tag=bulbapedia-20";
        firstHeading.parentNode.insertBefore(a, firstHeading.nextSibling);
    //}
        document.getElementById('uprightcol').style.right = (window.innerWidth - 500) + "px";
        if (window.innerWidth < 1440) {
            var rcol = document.getElementById("lowrightcol");
            if (rcol != null) {
                rcol.parentNode.removeChild(rcol);
            }
        }
        window.onresize = function (event) {
            //remove connatix inright rail
            //var connatixvid = document.getElementById('cnx-autoplay-container');
            //var connatixrr = document.getElementById('connatix-rightrail');
            //if (connatixvid != null) {
            //    connatixvid.parentNode.removeChild(connatixvid);
            //}
            //if (connatixrr != null) {
            //    connatixrr.parentNode.removeChild(connatixrr);
            //}
            document.getElementById('uprightcol').style.right = (window.innerWidth - 500) + "px";
            if (window.innerWidth < 1440)
            {
                var rcol = document.getElementById("lowrightcol");
                if (rcol != null) {
                    rcol.parentNode.removeChild(rcol);
                }                
            }
        };
    //kixer ad mid article
        //if (document.getElementById("contentbox").offsetHeight > 5000)
        //{
            var connatixScript = document.createElement('script');
            connatixScript.type = 'text/javascript';
            connatixScript.async = true;
            connatixScript.setAttribute('data-connatix-token', 'b4bf453a-3cbb-4cfd-a5cc-60101ca75d21');
            connatixScript.src = '//cdn.connatix.com/min/connatix.renderer.infeed.min.js';
            var kxContainer = document.createElement('div');
            if (typeof window.orientation != 'undefined')
            {
                kxContainer.className = 'rad-box';
            }
            
            kxContainer.id = 'mid-article-ad';
            var kixerMidDiv = document.createElement('div');
            kixerMidDiv.id = '__kx_ad_5490';
            kxContainer.appendChild(kixerMidDiv);
            //var hInsertIndex = Math.round(headers.length / 2);
            //var headerNode = headers[hInsertIndex];
            //headerNode.insertBefore(kixerMidDiv, headerNode.firstChild);
            //headerNode.appendChild(kxContainer);
            var __kx_ad_slots = __kx_ad_slots || [];
            (function () {
                var slot = 5490;
                var h = false;
                __kx_ad_slots.push(slot);
                if (typeof __kx_ad_start == 'function') {
                    __kx_ad_start();
                } else {
                    var s = document.createElement('script');
                    s.type = 'text/javascript';
                    s.async = true;
                    s.src = '//cdn.kixer.com/ad/load.js';
                    s.onload = s.onreadystatechange = function () {
                        if (!h && (!this.readyState || this.readyState == 'loaded' || this.readyState == 'complete')) {
                            h = true;
                            s.onload = s.onreadystatechange = null;
                            __kx_ad_start();
                        }
                    };
                    var x = document.getElementsByTagName('script')[0];
                    x.parentNode.insertBefore(s, x);
                }
            })();
            var innerContent = document.getElementById('mw-content-text');
            var goal = Math.round(innerContent.offsetHeight / 2);
            //var innerContentIndex = Math.round(innerContent.childElementCount / 2);
            var currentCandidate = innerContent.children[0];
            var currentValue = 0;
            var bestValue = goal - currentCandidate.offsetTop;
            var insertionPoint = document.getElementById('bottomframe');
            for (i = 0; i < innerContent.childElementCount; i++) {
                if (innerContent.children[i].offsetHeight != null) {
                    currentValue = Math.abs(goal - innerContent.children[i].offsetTop);
                    //console.log("hh " + currentValue);
                    if (currentValue <= bestValue) {                                                
                        if (innerContent.children[i].nodeName != 'DIV')
                        {
                            insertionPoint = innerContent.children[i];
                            //console.log('new best ' + insertionPoint);
                            bestValue = currentValue;
                        }
                    }
                    
                }
            }
            console.log(insertionPoint);
            insertionPoint.parentNode.insertBefore(kxContainer, insertionPoint.nextSibling);
            kxContainer.appendChild(connatixScript);
        //}
    //kixer ad bottom
        var kixerDiv = document.createElement('div');
        kixerDiv.id = '__kx_ad_5356';
        var ccontent = document.getElementById('content');
        ccontent.appendChild(kixerDiv);
        var __kx_ad_slots = __kx_ad_slots || [];
        (function () {
            var slot = 5356;
            var h = false;
            __kx_ad_slots.push(slot);
            if (typeof __kx_ad_start == 'function') {
                __kx_ad_start();
            } else {
                var s = document.createElement('script');
                s.type = 'text/javascript';
                s.async = true;
                s.src = '//cdn.kixer.com/ad/load.js';
                s.onload = s.onreadystatechange = function () {
                    if (!h && (!this.readyState || this.readyState == 'loaded' || this.readyState == 'complete')) {
                        h = true;
                        s.onload = s.onreadystatechange = null;
                        __kx_ad_start();
                    }
                };
                var x = document.getElementsByTagName('script')[0];
                x.parentNode.insertBefore(s, x);
            }
        })();
</script>
<div id="lowrightcol">
    <div class="rad-box">
        <div style="margin-bottom:15px;margin-top:15px;">
            <a href="blahttp://goo.gl/5DYzsz"><div style="margin:auto; width: 321px;height: 169px;background-repeat: no-repeat;background-size: cover;background-image: url(blahttp://bulba-ad-host-website.azurewebsites.net/Content/righgr_rail.jpg); background-repeat:no-repeat;"></div></a>
        </div>
    </div>
    <div class="rad-box">
        <div id="zergnet-widget-40427"></div>
        <script language="javascript" type="text/javascript">
            (function () {
                var zergnet = document.createElement('script');
                zergnet.type = 'text/javascript'; zergnet.async = true;
                zergnet.src = 'blahttp://www.zergnet.com/zerg.js?id=40427';
                var znscr = document.getElementsByTagName('script')[0];
                znscr.parentNode.insertBefore(zergnet, znscr);
            })();
        </script>
    </div>
    <div class="rad-box">
        <div id="zergnet-widget-40428"></div>
        <script language="javascript" type="text/javascript">
            (function () {
                var zergnet = document.createElement('script');
                zergnet.type = 'text/javascript'; zergnet.async = true;
                zergnet.src = 'blahttp://www.zergnet.com/zerg.js?id=40428';
                var znscr = document.getElementsByTagName('script')[0];
                znscr.parentNode.insertBefore(zergnet, znscr);
            })();
        </script>
    </div>
